#define THREADS_X 32
#define THREADS_Y 32
#define PI 3.14159265358979323846

layout(std140, binding = 1) uniform UniformBlock
{
	float zThickness; // How thick is each depth fragment? higher value yields some wierd smudging at edges of reflection, but thinner z means we might miss some geometry. This should essentially be the average thickness of the geometry. to do dynamically would be a nightmare however...
	float stride; // lets you skip pixels during iteration. Larger stride means longer rays with same number of samples.
	float jitter; // if stride > 1 we ge banding results. This can be traded for noise by jittering the start position of each ray.
	float maxSteps; //Less steps means shorter reflections, but better performance
	float maxDistance; //Not orthogonal to max steps. reflection of surfaces far away in world space are prone to rapid shifts with only a slight change in camera positioning, which can lead to objectionable temporal flicker. Setting this parameter can help mitigate that.
	uvec2 workGroups; // How many workgroups do we have?
	float padding; // Just padding. Might not be needed because std140
};

uniform ivec2 RayCastSize;
uniform float bias;

uniform sampler2D depthMap;
uniform sampler2D normalMap;
uniform sampler2D specularMap;
uniform sampler2D colorMap;

uniform sampler2D noiseMap;

layout (rgba32f) uniform writeonly image2D rays;

//**--------------------------------------------
/* Distance Squared
*/
float distanceSquared(vec2 a, vec2 b)
{
	a -= b;
	return dot(a, a);
}

//**--------------------------------------------
/* Importance-Sample GGX
Xi is a tangentspace sample
out PDF is set to the probability distribution function
*/
vec3 ImportanceSampleGGX(out float PDF, in vec2 Xi, in float roughness, in vec3 N)
{
	//Disney roughness
	float a = roughness * roughness;
	float a2 = a*a;

	float phi = 2 * PI * Xi.x;
	float cosTheta = sqrt((1.0f - Xi.y) / (1.0f + (a2 - 1.0f) * Xi.y));
	float sinTheta = sqrt(max(0.0001f, 1.0f - cosTheta * cosTheta));

	vec3 H;
	H.x = sinTheta * cos(phi);
	H.y = sinTheta * sin(phi);
	H.z = cosTheta;

	//Probability Distribution Function
	float d = (cosTheta * a2 - cosTheta) * cosTheta + 1.0f;
	float D = a2 / (PI * d * d);
	PDF = D * cosTheta;

	// Tangent to worldspace adjustment
	vec3 upvec = abs(N.z) < 0.999f ? vec3(0.0f,0.0f,1.0f) : vec3(1.0f,0.0f,0.0f);
	vec3 tangentX = normalize(cross(upvec, N));
	vec3 tangentY = cross(N, tangentX);

	return tangentX * H.x + tangentY* H.y + N * H.z;
}

//**--------------------------------------------
/* Trace Screen Space Ray
*/

bool TraceScreenSpaceRay(in vec3 rayOrigin,
						 in vec3 rayDirection,
						 out vec2 hitTexCoord,
						 out vec3 hitPoint
						 )
{
	float nearPlane = -0.05f;

	// Clip to the near plane
	float rayLength = ((rayOrigin.z + rayDirection.z * maxDistance) > nearPlane) ? (nearPlane - rayOrigin.z) / rayDirection.z : maxDistance;

	vec3 rayEnd = rayOrigin + rayDirection * rayLength;

	// Project into homogeneous clip space
	vec4 H0 = ViewToTextureSpace * vec4( rayOrigin, 1.0f);
	vec4 H1 = ViewToTextureSpace * vec4( rayEnd, 1.0f);

	float k0 = 1.0 / H0.w;
	float k1 = 1.0 / H1.w;

	// The interpolated homogeneous version of the camera-space points
	vec3 Q0 = rayOrigin * k0;
	vec3 Q1 = rayEnd * k1;

	// Screen-space endpoints
	vec2 P0 = H0.xy * k0;
	vec2 P1 = H1.xy * k1;

	// If the line is degenerate, make it cover at least one pixel
	// to avoid handling zero-pixel extent as a special case later
	P1 += (distanceSquared(P0, P1) < 0.0001) ? 0.01 : 0.0;

	vec2 delta = P1 - P0;

	// Permute so that the primary iteration is in x to collapse
	// all quadrant-specific DDA cases later
	bool permute = false;

	if (abs(delta.x) < abs(delta.y))
	{
		// This is a more-vertical line
		permute = true;
		delta = delta.yx;
		P0 = P0.yx;
		P1 = P1.yx;
	}

	float stepDir = sign(delta.x);
	float invdx = stepDir / delta.x;

	// Track the derivatives of Q and k
	vec3  dQ = (Q1 - Q0) * invdx;
	float dk = (k1 - k0) * invdx;
	vec2  dP = vec2(stepDir, delta.y * invdx);

	//float strideScaler = 1.0 + min( 1.0, -rayOrigin.z / 100.0f);
	//float pixelStride = 1.0 + strideScaler * stride;

	// Scale derivatives by the desired pixel stride and then
	// offset the starting values by the jitter fraction
	dP *= stride;
	dQ *= stride;
	dk *= stride;
	P0 += dP * jitter;
	Q0 += dQ * jitter;
	k0 += dk * jitter;

	float i;
	float zA = rayOrigin.z;
	float zB = rayOrigin.z;

	// Track ray step and derivatives in a float4 to parallelize
	vec4 pqk = vec4( P0, Q0.z, k0);
	vec4 dPQK = vec4( dP, dQ.z, dk);
	bool intersect = false;

	float end = P1.x * stepDir;

	for(i = 0; i < maxSteps && intersect == false; i++)
	{
		pqk += dPQK;

		hitTexCoord = permute ? pqk.yx : pqk.xy;

		zA = zB;
		zB = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);
		if (zB > zA)
		{
			//Swap
			float t = zA;
			zA = zB;
			zB = t;
        }


		//This doesn't seem necessary anymore...
		// || pqk.x * stepDir >= end
		if(hitTexCoord.x > ScreenSize.x || hitTexCoord.y > ScreenSize.y || hitTexCoord.x < 0 || hitTexCoord.y < 0)
		{
			break;
		}

		float depth = -texelFetch(depthMap, ivec2(hitTexCoord), 0).r;

		intersect = (zB >= depth - zThickness) && (zA <= depth);
	}

	Q0.xy += dQ.xy * i;
	Q0.z = pqk.z;
	hitPoint = Q0 / pqk.w;

	return intersect;
}

layout(local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;
void main()
{
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);

	vec2 TexCoord = vec2(location) / RayCastSize;
	
	//vec4 specularAndRoughness = texture(specularMap, TexCoord, 0).rgba;
	//float roughness = specularAndRoughness.w;

	//Get normal from normal map. This only needs to be done once per pixel
	vec3 worldNormal = (texture(normalMap, TexCoord, 0).rgb);
	//We need the normal to be in viewspace coordinates.
	vec3 viewSpaceNormal = normalize((View * vec4(worldNormal, 0.0f)).rgb);

	float pixelDepth = texture(depthMap, TexCoord, 0).r;

	//Calculate world pos
	vec4 clipSpaceLocation;
	clipSpaceLocation.xy = TexCoord * 2.0f - 1.0f;
	clipSpaceLocation.z = 1.0f;
	clipSpaceLocation.w = 1.0f;
	vec4 homogenousLocation = InvProjection * clipSpaceLocation;
	vec3 viewSpacePosition = homogenousLocation.xyz;

	vec3 rayOrigin = viewSpacePosition * pixelDepth;

	vec3 viewDir = normalize(rayOrigin.xyz);

	//vec2 noiseJitter = texture(noiseMap, TexCoord).xy;

	//our distribution sample
	//vec2 Xi = noiseJitter;
	//lerp with bias
	//Xi.y = mix(Xi.y, 0.0, bias);

	//This is set by the importance sampling function
	float pdf = 1.0f;
	
	//vec3 H = ImportanceSampleGGX(pdf, Xi, roughness, viewSpaceNormal);	
	
	//Reflect vector against H
	vec3 reflectionDir = (reflect(viewDir, viewSpaceNormal));
	//vec3 reflectionDir = (reflect(viewDir, (View * vec4(H , 0.0f)).xyz));

	//raymarch and find a collision point
	//TODO: Use either hierical Z stepping, cheap raymarching or the efficient DDA algorithm described in "Efficient GPU Raytracing"
	vec4 outray;
	vec2 hitTexCoord;
	vec3 hitPoint;
	if (TraceScreenSpaceRay(rayOrigin.xyz, reflectionDir, hitTexCoord, hitPoint))
	{
		vec3 N = (texture(normalMap, (hitTexCoord / ScreenSize), 0).rgb);
		//We need the normal to be in viewspace coordinates.
		vec3 vN = ((View * vec4(N, 0.0f)).rgb);
		
		if(dot(vN, reflectionDir) > 0)
		{
			//No hit was found.
			//We set the outray to reflectionDir
			outray.xyz = reflectionDir.xyz;
			//We need some way of telling the resolve pass that this is not a true hit.
			//We do this by setting the PDF to a negative value. This is later interpreted as a boolean value: (pdf < 0 ? 0 : 1)
			outray.w = -pdf;
		}
		else
		{
			outray.xy = hitPoint.xy; //screen space UV hit
			outray.z = hitPoint.z; //hit depth
			outray.w = pdf;
		}
	}
	else
	{
		//No hit was found.
		//We set the outray to reflectionDir
		outray.xyz = reflectionDir.xyz;
		//We need some way of telling the resolve pass that this is not a true hit.
		//We do this by setting the PDF to a negative value. This is later interpreted as a boolean value: (pdf < 0 ? 0 : 1)
		outray.w = -pdf;
	}

	imageStore(rays, location, outray);
	
	//groupMemoryBarrier();
}
