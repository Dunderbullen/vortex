#define THREADS_X 32
#define THREADS_Y 32

// All the samplers we need!
uniform sampler2D depthMap;
uniform sampler2D normalMap;
uniform sampler2D specularMap;
uniform sampler2D colorMap;

layout (rgba32f) uniform writeonly image2D reflectionImage;

//We can have a maximum of 8 cubemaps blended simultaneously
uniform samplerCube Cubemaps[8];

struct CubemapData
{
	mat4 geometryproxy;
	vec4 cubeMapPosition;
	float blendfactor;
};

uniform uint numCubemaps;

layout(std140, binding = 10) uniform CubeMapBlock
{	
	//how many cubemaps we are currently blending between
	CubemapData cubemapData[8];
};

// Shared values between all the threads in a group
//shared DepthSamples


void GetBlendedAndParallaxCorrectedCubeMapColor(in float roughness, in vec3 rayPosition, in vec3 reflectionDir, out vec3 reflectionColor)
{
	vec3 cubeColor = vec3(0.0f,0.0f,0.0f);
	
	for(int i = 0; i < numCubemaps; ++i)
	{
		// Intersection with OBB
		// convert to unit box space
		// Transform in local unit parallax cube space (scaled and rotated)
		// Why multiply by 2? Magic.
		vec3 RayLS = (mat3(inverse(cubemapData[i].geometryproxy)) * reflectionDir) * 2.0f;
		vec3 PositionLS = (inverse(cubemapData[i].geometryproxy) * vec4(rayPosition, 1.0f)).xyz * 2.0f;
		
		vec3 Unitary = vec3(1.0f,1.0f,1.0f);
		vec3 FirstPlaneIntersect = (Unitary - PositionLS) / RayLS;
		vec3 SecondPlaneIntersect = (-Unitary - PositionLS) / RayLS;
		vec3 FurthestPlane = max(FirstPlaneIntersect, SecondPlaneIntersect);
		float Distance = min(FurthestPlane.x, min(FurthestPlane.y, FurthestPlane.z));

		// Use Distance in WS directly to recover intersection
		vec3 IntersectPositionWS = rayPosition + reflectionDir * Distance;
		vec3 newWorldDirection = IntersectPositionWS - cubemapData[i].cubeMapPosition.xyz;

		float mipLevel = floor((1 - roughness) * 6);
	
		cubeColor += textureLod(Cubemaps[i], newWorldDirection, mipLevel).rgb * cubemapData[i].blendfactor;
	}
	
	reflectionColor = cubeColor;
}

layout(local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;
void main()
{
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);

	//Per pixel on depthbuffer

	vec2 TexCoord = vec2(location) / ScreenSize;
	//First of all we need to generate a reflection vector

	//Get normal from normal map. This only needs to be done once per pixel
	vec3 worldNormal = (texelFetch(normalMap, location, 0).rgb);

	//We need the normal to be in viewspace coordinates.
	//vec3 viewSpaceNormal = normalize((View * vec4(worldNormal, 0.0f)).rgb);

	float pixelDepth = texelFetch(depthMap, location, 0).r;

	//Calculate world pos
	vec4 clipSpaceLocation;
	clipSpaceLocation.xy = TexCoord * 2.0f - 1.0f;
	clipSpaceLocation.z = 1.0f;
	clipSpaceLocation.w = 1.0f;
	vec4 homogenousLocation = InvProjection * clipSpaceLocation;
	vec3 viewSpacePosition = homogenousLocation.xyz;

	vec3 rayOrigin = viewSpacePosition * pixelDepth;
	rayOrigin = (InvView * vec4(rayOrigin, 1.0f)).xyz;
	
	vec3 viewDir = normalize(rayOrigin.xyz - CameraPosition.xyz);
	//Reflect vector against normal
	vec3 reflectionDir = normalize(reflect(viewDir, worldNormal));
	
	vec4 specularAndRoughness = texelFetch(specularMap, location, 0).rgba;
	float roughness = specularAndRoughness.w;
	vec4 BGColor = texelFetch(colorMap, location, 0).rgba;
		
	vec3 reflectionColor;
	
	GetBlendedAndParallaxCorrectedCubeMapColor(roughness, rayOrigin.xyz, reflectionDir, reflectionColor);
	
	//if(roughness == 200.0f)
	//{
	vec4 finalColor = vec4((BGColor.rgb * (1-specularAndRoughness.r)) + (reflectionColor.rgb * specularAndRoughness.r), BGColor.a);
	imageStore(reflectionImage, location, finalColor);
	//}
	//else
	//{
	//	vec4 finalColor = vec4(reflectionColor, 1.0f);
	//	imageStore(reflectionImage, location, finalColor);
	//}
	
	groupMemoryBarrier();
}
